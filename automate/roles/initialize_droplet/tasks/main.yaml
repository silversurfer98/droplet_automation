---
- include_vars: ../../../common/common_vars.yaml

# Some common updates
- name: Update the instance
  ansible.builtin.apt:
    name: "*"
    state: latest

- name: Add a new user
  user:
    name: "{{ myuser }}"
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: .ssh/id_rsa
    comment: "summa"
    password: "{{ '{{ pass }}' | password_hash('sha512') }}"
    shell: /bin/bash
    createhome: yes

- name: Add the user to sudoers
  lineinfile:
    dest: /etc/sudoers
    line: "{{ myuser }} ALL=(ALL) NOPASSWD:ALL"
    validate: 'visudo -cf %s'

- name: Copy authorized SSH key list from root
  ansible.builtin.shell: cp /root/.ssh/authorized_keys /home/"{{ myuser }}"/.ssh/authorized_keys

- name: set permission for authorized SSH key list
  ansible.builtin.file:
    path: /home/{{ myuser }}/.ssh/authorized_keys
    owner: "{{ myuser }}"
    group: "{{ myuser }}"
    mode: '0644'

- name: harden SSH
  lineinfile: 
    dest: /etc/ssh/sshd_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - {regexp: '^#?AuthenticationMethods', line: 'AuthenticationMethods publickey'}
    - {regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no'}
    - {regexp: '^#?ChallengeResponseAuthentication', line: 'ChallengeResponseAuthentication no'}
    - {regexp: '^#?PubkeyAuthentication', line: 'PubkeyAuthentication yes'}
    - {regexp: '^#?UsePAM', line: 'UsePAM yes'}

# Docker setup
- name: install docker
  ansible.builtin.apt:
    name: 
      - docker.io
      - docker-compose-v2
    state: latest
    update_cache: yes
    install_recommends: no

- name: Add docker to user grp
  ansible.builtin.shell: usermod -aG docker "{{ myuser }}"

# Login notifier and Time notifier setup
- name: Create login_notifier
  template:
    src: login_notifier.j2
    dest: /home/{{ myuser }}/login_notifier
    mode: 0755
    owner: "{{ myuser }}"
    group: "{{ myuser }}"

- name: add login_notifier to PAM file
  lineinfile:
    path: /etc/pam.d/sshd
    insertafter: "EOF"
    line: "session  optional  pam_exec.so  /home/{{ myuser }}/login_notifier"

- name: Create time_notifier
  template:
    src: time_notifier.sh.j2
    dest: /home/{{ myuser }}/time_notifier.sh
    mode: 0755
    owner: "{{ myuser }}"
    group: "{{ myuser }}"

- name: Add time_notifier to cron job
  become_user: "{{ myuser }}"
  become: true
  cron:
    name: "time_notifier cron"
    minute: "0"               # checks every hour
    job: "/home/{{ myuser }}/time_notifier.sh"

# SOPS Setup
- name: check local/bin exists
  become_user: "{{ myuser }}"
  become: true
  stat:
    path: /home/{{ myuser }}/.local/bin
  register: local_bin

- name: create local/bin folder
  become_user: "{{ myuser }}"
  become: true
  ansible.builtin.file:
    path: /home/{{ myuser }}/.local/bin
    state: directory
    owner: "{{ myuser }}"
    group: "{{ myuser }}"
    mode: 0775
  when: not local_bin.stat.exists

- name: SOPS download and setup
  become_user: "{{ myuser }}"
  become: true
  ansible.builtin.get_url:
    url: https://github.com/getsops/sops/releases/download/v3.9.0/sops-v3.9.0.linux.amd64
    dest: /home/{{ myuser }}/.local/bin/sops
    mode: 0755
    owner: "{{ myuser }}"
    group: "{{ myuser }}"
    validate_certs: false

# Create the key file for SOPS
- name: create age key file folder
  become_user: "{{ myuser }}"
  become: true
  ansible.builtin.file:
    path: /home/{{ myuser }}/.sops-age
    state: directory
    owner: "{{ myuser }}"
    group: "{{ myuser }}"
    mode: 0775  

- name: bootstrap AGE key file
  template:
    src: age_file.j2
    dest: /home/{{ myuser }}/.sops-age/key.txt
    mode: 0755
    owner: "{{ myuser }}"
    group: "{{ myuser }}"

- name: Create the SOPS env variables and add to bashrc
  become_user: "{{ myuser }}"
  become: true
  lineinfile: 
    dest: /home/{{ myuser }}/.bashrc
    line: "{{ item.line }}"
    state: present
  with_items:
    - {line: 'export SOPS_AGE_KEY_FILE=$HOME/.sops-age/key.txt'}
    - {line: 'export SOPS_AGE_RECIPIENTS=$(cat $SOPS_AGE_KEY_FILE |grep -oP "public key: \K(.*)")'}


# - name: Restart SSHD service
#   service:
#     name: sshd
#     state: restarted
